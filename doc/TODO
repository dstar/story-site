-*- mode: org; -*-
#+CATEGORY: story-site
* DONE tweak various things for sessions and session data to actually _work_
  properly in terms of restricting access, and saving comments, etc.  
* DONE There is no caching of any kind as yet. It would be nice to add
  appropriate caching.
* DONE no Ajax for e.g. paragraph comments, paragraph
  editing. would be nice
  to make it use Ajax, which I shall work on when I get a
  chance. HOWTO (for edit): change link to ajaxically pull in
  paragraphs/_form.rhtml (separate action) if javascript  enabled,
  otherwise link to edit action. same-same for comments.
* DONE Add column 'read' to pcomments. Takes an array of author names.
* DONE stylesheets, and, in general, class names for divs, etc. should be
  mapped to the current stylesheet set-- the other choice would be to
  create a new stylesheet that matches the current layout, which might
  actually be a better idea. For that matter, one stylesheet is not
  consistently being used; this needs to be fixed.
  code to get all stylesheet elements:
      require 'rexml/document'
      xml = REXML::Document.new(File.open("filename"))
      # keys of @hash are our css elements
      @hash = Hash.new
      xml.elements.each do |e|
        @hash["#{e}.#{c.attributes["class"]}"] = 1
        @hash["#{e}"] = 1
      end
* DONE should add the javascript bit for changing stylesheets to the layout
  pages once there are two stylesheets
* DONE am not sure if sessions store cookies for <foo>.pele.cx or just
  pele.cx; ideally want only pele.cx so that data is carried over
  between the subdomains?
* DONE (if test chapter arrives ok) Send to ASSM functionality
* DONE Send to SOL functionality
* DONE Keywords
* DONE Auto-dump chapters
* TODO Auto-release chapters at a specific date/time
** DONE Import old blog entries
   CLOSED: [2007-01-15 Sun]
* DONE Fix next link in show_comments mode
  CLOSED: [2007-03-03 Sat]

* TODO Get codebase ready for release
** TODO Backport all the changes in the new-auth-system branch except the new auth system to the trunk
*** TODO Create TODO items for all of the changes
** TODO Complete new auth system
*** TODO Document/Diagram new auth system, to ensure it's a good architecture, (using use-case UML diagrams?)
    COMPLETE CHANGE IN NEW AUTH SYSTEM! Users and Groups have
    permissions for a _particular object_, held in a 'Permissions'
    table (attributes permission_holder, type, object,
    permission). Permission_Holder is any object which can posess
    permissions. Required attributes are held in a 'RequiredAttribute'
    table (attributes object, action, differentiator,
    required_permission). Differentiator is a required method for any
    object which has permissions; it returns an opaque selector used
    to differentiate between the possible required permissions for an
    object-action pair. (For example, for a Story, differentiator()
    would simply return self.status, and the current tuples would be
    (story_id, 'view', 'released', 'PUBLIC') and (story_id, 'view',
    'draft', 'beta-reader'). The table 'AvailablePermissions'
    (attributes name) will contain the available permissions;
    RequiredPermissions and Permissions will be normalized to use
    available_permission_id. A better name will be chosen for
    AvailablePermissions (and possibly Permissions). .can?  will be an
    instance method. The differentiation between StoryPermission,
    UniversePermission, etc will vanish. Each permissionable object
    will have an owner, which will default to the creator of the
    class. The owner of the object will have all permissions on the
    object, as will the owner of its parent (that is, for a chapter,
    the self.owner, self.story.owner, self.story.universe.owner, and
    self.universe.site.owner will have all priviliges). Each
    permissionable object will implement is_superuser?, which will
    return true if the user is a superuser (checking its parent class
    if it is not). Universes will gain Site as an owner. A
    'permit-all' permission will be in AvailablePermissions by
    default, tentatively called 'PUBLIC'; anything with this
    permission can be done by anyone. A 'permit-authenticated'
    permission ('LOGGED-IN') will be true for anyone who has logged
    in.
** todo Fix show-drafts incompatibility with elinks
** TODO Fix edit_themes
** TODO add text-area to set release scripts
** DONE add close button to bottom of open comment area   CLOSED: [2007-03-10 Sat]
** TODO Refactor read_by into a separate class