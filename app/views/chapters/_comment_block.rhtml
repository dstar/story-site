	<% total_comments = para.pcomments.count(:conditions => "flag < 2") %>
	<% unread_comments = para.pcomments.count(:conditions => "flag < 2 and not read_by regexp ' #{@authinfo[:username]}\n'") %>
	<% can_edit = (@authinfo[:user_id] and User.find(@authinfo[:user_id]).has_story_permission(para.chapter.story,'author') ) %>
	<form>
		<input type="hidden" id="comment_count_<%= para.id %>" value="<%= total_comments %>">
		<input type="hidden" id="unread_comment_count_<%= para.id %>" value="<%= unread_comments %>">
	</form>
	<a id="<%= ["pcomment",para.id] %>" onClick="Element.toggle('comments<%= para.id %>')">&#182; (<%= total_comments %> comments, <%= unread_comments  %> unread)</a>
	<p><%= link_to_remote 'Edit this paragraph', :url => { :controller => 'paragraphs', :action => 'edit', :id => para.id }, :update => "parabody#{para.id}" if can_edit %></p>
	<div class="comments_display" id="comments<%= para.id %>" style="display:none">
		<div class="comments_body" id="comments_body<%= para.id %>">
			<%= render :partial => 'chapters/pcomm', :collection => Pcomment.listForPara(para.id) %>
		</div>
	<p><%= link_to_remote 'Comment on this paragraph', :url => { :controller => 'pcomments', :action => 'new', :paragraph_id => para.id}, :update => "comments_body#{para.id}" if @authinfo[:username]%></p>
	</div>
